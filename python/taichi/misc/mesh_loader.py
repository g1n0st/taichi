import numpy as np


class OBJFile:
    def __init__(self, filename, swapyz=False):
        """Loads a Wavefront OBJ file. """
        self.vertices = []
        self.normals = []
        self.texcoords = []
        self.faces = []

        for line in open(filename, "r"):
            if line.startswith('#'): continue
            values = line.split()
            if not values: continue
            if values[0] == 'v':
                v = list(map(float, values[1:4]))
                if swapyz:
                    v = v[0], v[2], v[1]
                self.vertices.append(v)
            elif values[0] == 'vn':
                v = list(map(float, values[1:4]))
                if swapyz:
                    v = v[0], v[2], v[1]
                self.normals.append(v)
            elif values[0] == 'vt':
                self.texcoords.append(list(map(float, values[1:3])))
            elif values[0] in ('usemtl', 'usemat'):
                continue
            elif values[0] == 'mtllib':
                continue
            elif values[0] == 'f':
                face = []
                texcoords = []
                norms = []
                for v in values[1:]:
                    w = v.split('/')
                    face.append(int(w[0]))
                    if len(w) >= 2 and len(w[1]) > 0:
                        texcoords.append(int(w[1]))
                    else:
                        texcoords.append(0)
                    if len(w) >= 3 and len(w[2]) > 0:
                        norms.append(int(w[2]))
                    else:
                        norms.append(0)
                self.faces.append(face)
            else:
                continue

        self.vertices = np.asarray(self.vertices, dtype=np.float32)
        self.faces = np.asarray(self.faces, dtype=np.uint32)


class TetFile:
    def __init__(self, filename):
        """Loads a Tet file generated by Tetgen. """
        self.vertices = []
        self.cells = []

        with open(f'{filename}.node') as f:
            node_cols, _n, _0, _1 = np.fromfile(f, dtype=int, count=4, sep=" ")
            print('node(s): ', node_cols)
            for i in range(node_cols):
                id_ = np.fromfile(f, dtype=int, count=1, sep=" ")
                x, y, z = np.fromfile(f, dtype=np.float32, count=3, sep=" ")
                self.vertices.append([x, y, z])

            self.vertices = np.asarray(self.vertices, dtype=np.float32)

        with open(f'{filename}.ele') as f:
            cell_cols, _0 = np.fromfile(f, dtype=int, count=2, sep=" ")
            print('cell(s): ', cell_cols)
            for i in range(cell_cols):
                id_ = np.fromfile(f, dtype=int, count=1, sep=" ")
                x, y, z, w = np.fromfile(f, dtype=np.uint32, count=4, sep=" ")
                self.cells.append([x, y, z, w])

            self.cells = np.asarray(self.cells, dtype=np.uint32)
